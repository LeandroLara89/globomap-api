import sys
import json
import os

from requests import Session


def main():
    session = Session()
    token = None

    try:
        response = session.request(
            'POST',
            '{}/v2/auth/'.format(os.getenv('GLOBOMAP_API_URL')),
            data=json.dumps({
                "username": os.getenv('GLOBOMAP_API_USERNAME'),
                "password": os.getenv('GLOBOMAP_API_PASSWORD')
            }),
            headers={'Content-Type': 'application/json'},
            verify=False
        )
    except Exception:
        print('auth error')
        sys.exit(response.json())
    else:
        if response.status_code == 200:
            print('auth ok...')
            content = response.json()
            token = content['token']
        else:
            print('auth error')
            sys.exit(response.json())

    collections = [
        {"alias": "Unknown", "name": "unknown", "replicationFactor": 2, "icon": "unknown", "description": "Unknown", "users": ["u_globomap_driver_acs", "u_globomap_driver_cmdb", "u_globomap_driver_napi"]},
        {"alias": "Volume do Filer", "name": "volume", "replicationFactor": 2, "icon": "volume", "description": "Volume do Filer", "users": ["u_globomap_driver_custeio", "u_globomap_driver_faas"]},
        {"alias": "Foreman Host", "name": "foreman_host", "replicationFactor": 2, "icon": "foreman_host", "description": "Foreman Host", "users": ["u_globomap_driver_foreman"]},
        {"alias": "Pool do Tsuru", "name": "tsuru_pool", "replicationFactor": 2, "icon": "tsuru_pool", "description": "Pool do Tsuru", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "Host", "name": "comp_unit", "replicationFactor": 2, "icon": "comp_unit", "description": "Host", "users": ["u_globomap_driver_acs", "u_globomap_driver_cmdb", "u_globomap_driver_napi"]},
        {"alias": "Região(Cloud Stack)", "name": "region", "replicationFactor": 2, "icon": "region", "description": "Região(Cloud Stack)", "users": ["u_globomap_driver_acs"]},
        {"alias": "Keystone User", "name": "ks_user", "replicationFactor": 2, "icon": "ks_user", "description": "Keystone User", "users": ["u_globomap_driver_keystone"]},
        {"alias": "Zona(Cloud Stack)", "name": "zone", "replicationFactor": 2, "icon": "zone", "description": "Zona(Cloud Stack)", "users": ["u_globomap_driver_acs"]},
        {"alias": "Gráfico Zabbix", "name": "zabbix_graph", "replicationFactor": 2, "icon": "zabbix_graph", "description": "Gráfico Zabbix", "users": ["u_globomap_driver_zabbix"]},
        {"alias": "Tag do Firewall", "name": "tag_firewall", "replicationFactor": 2, "icon": "tag_firewall", "description": "Tag do Firewall", "users": ["u_globomap_driver_gproxy"]},
        {"alias": "Swift Account", "name": "swift_account", "replicationFactor": 2, "icon": "swift_account", "description": "Swift Account", "users": ["u_globomap_driver_swift"]},
        {"alias": "Processo(Custeio)", "name": "custeio_process", "replicationFactor": 2, "icon": "custeio_process", "description": "Processo(Custeio)", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Rede", "name": "network", "replicationFactor": 2, "icon": "network", "description": "Rede", "users": ["u_globomap_driver_napi"]},
        {"alias": "Usuário LDAP", "name": "ldap_user", "replicationFactor": 2, "icon": "ldap_user", "description": "Usuário LDAP", "users": ["u_globomap_driver_authapi"]},
        {"alias": "App do Tsuru", "name": "tsuru_app", "replicationFactor": 2, "icon": "tsuru_app", "description": "App do Tsuru", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "Instancia de Servico do Tsuru", "name": "tsuru_service_instance", "replicationFactor": 2, "icon": "tsuru_service_instance", "description": "Instancia de Servico do Tsuru", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "DNS", "name": "dns", "replicationFactor": 2, "icon": "dns", "description": "DNS", "users": ["u_globomap_driver_dns"]},
        {"alias": "DB", "name": "database", "replicationFactor": 2, "icon": "database", "description": "DB", "users": ["u_globomap_driver_dbaas"]},
        {"alias": "Pool do Galeb", "name": "galeb_pool", "replicationFactor": 2, "icon": "galeb_pool", "description": "Pool do Galeb", "users": ["u_globomap_driver_galeb"]},
        {"alias": "Virtual Host(Galeb)", "name": "galeb_virtual_host", "replicationFactor": 2, "icon": "galeb_virtual_host", "description": "Virtual Host(Galeb)", "users": ["u_globomap_driver_galeb"]},
        {"alias": "Export(Filer)", "name": "export", "replicationFactor": 2, "icon": "export", "description": "Export(Filer)", "users": ["u_globomap_driver_faas"]},
        {"alias": "Servico do Tsuru", "name": "tsuru_service", "replicationFactor": 2, "icon": "tsuru_service", "description": "Servico do Tsuru", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "Keystone Project", "name": "ks_project", "replicationFactor": 2, "icon": "ks_project", "description": "Keystone Project", "users": ["u_globomap_driver_keystone"]},
        {"alias": "Grupo LDAP", "name": "ldap_group", "replicationFactor": 2, "icon": "ldap_group", "description": "Grupo LDAP", "users": ["u_globomap_driver_authapi"]},
        {"alias": "Recurso(Custeio)", "name": "custeio_resource", "replicationFactor": 2, "icon": "custeio_resource", "description": "Recurso(Custeio)", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Classe do Puppet", "name": "foreman_puppet_class", "replicationFactor": 2, "icon": "foreman_puppet_class", "description": "Classe do Puppet", "users": ["u_globomap_driver_foreman"]},
        {"alias": "VLAN", "name": "vlan", "replicationFactor": 2, "icon": "vlan", "description": "VLAN", "users": ["u_globomap_driver_napi"]},
        {"alias": "Produto(Custeio)", "name": "custeio_product", "replicationFactor": 2, "icon": "custeio_product", "description": "Produto(Custeio)", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Componente(Custeio)", "name": "custeio_component", "replicationFactor": 2, "icon": "custeio_component", "description": "Componente(Custeio)", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Ambiente de Rede", "name": "environment", "replicationFactor": 2, "icon": "environment", "description": "Ambiente de Rede", "users": ["u_globomap_driver_napi"]},
        {"alias": "Snapshot(Faas)", "name": "snapshot", "replicationFactor": 2, "icon": "snapshot", "description": "Snapshot(Faas)", "users": ["u_globomap_driver_faas"]},
        {"alias": "VIP", "name": "vip", "replicationFactor": 2, "icon": "vip", "description": "VIP", "users": ["u_globomap_driver_napi"]},
        {"alias": "Pool do VIP", "name": "pool", "replicationFactor": 2, "icon": "pool", "description": "Pool do VIP", "users": ["u_globomap_driver_napi"]},
        {"alias": "Rule(Galeb)", "name": "galeb_rule", "replicationFactor": 2, "icon": "galeb_rule", "description": "Rule(Galeb)", "users": ["u_globomap_driver_galeb"]},
        {"alias": "Serviço de Negócio", "name": "custeio_business_service", "replicationFactor": 2, "icon": "custeio_business_service", "description": "Serviço de Negócio", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Cliente", "name": "custeio_client", "replicationFactor": 2, "icon": "custeio_client", "description": "Cliente", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Time", "name": "custeio_team", "replicationFactor": 2, "icon": "custeio_team", "description": "Time", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Subcomponente", "name": "custeio_sub_component", "replicationFactor": 2, "icon": "custeio_sub_component", "description": "Subcomponente", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Certificado", "name": "domain", "replicationFactor": 2, "icon": "domain", "description": "Certificado", "users": ["u_globomap_driver_domain"]}
    ]

    for collection in collections:
        try:
            response = session.request(
                'POST',
                '{}/v2/collections/'.format(os.getenv('GLOBOMAP_API_URL')),
                data=json.dumps(collection),
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': 'Token token={}'.format(token)
                },
                verify=False
            )
        except Exception:
            print("create collection '{}' error".format(collection['name']))
            sys.exit(response.json())
        else:
            print("create collection '{}' ok...".format(collection['name']))
            content = response.json()
            print(response.status_code)
            print(content)

    edges = [
        {"alias": "Link: Foreman Host - DNS", "name": "foreman_host_dns", "replicationFactor": 2, "icon": "foreman_host_dns", "description": "Link: Foreman Host - DNS", "users": ["u_globomap_driver_foreman"]},
        {"alias": "Link: Serviço de Negócio - Equipamento", "name": "custeio_business_service_comp_unit", "replicationFactor": 2, "icon": "custeio_business_service_comp_unit", "description": "Link: Serviço de Negócio - Equipamento", "users": ["u_globomap_driver_cmdb", "u_globomap_driver_acs"]},
        {"alias": "Link: Volume - Filer", "name": "filer_volume", "replicationFactor": 2, "icon": "filer_volume", "description": "Link: Volume - Filer", "users": ["u_globomap_driver_custeio", "u_globomap_driver_faas"]},
        {"alias": "Link: Processo(Custeio) - Storage", "name": "custeio_process_storage", "replicationFactor": 2, "icon": "custeio_process_storage", "description": "Link: Processo(Custeio) - Storage", "users": ["u_globomap_driver_custeio"]},
        {"alias": "link database-tsuru", "name": "database_tsuru_service_instance", "replicationFactor": 2, "icon": "database_tsuru_service_instance", "description": "link database-tsuru", "users": ["u_globomap_driver_dbaas"]},
        {"alias": "Link: Processo(Custeio) - Equipamento", "name": "custeio_process_comp_unit", "replicationFactor": 2, "icon": "custeio_process_comp_unit", "description": "Link: Processo(Custeio) - Equipamento", "users": ["u_globomap_driver_cmdb", "u_globomap_driver_acs"]},
        {"alias": "Link: Cliente - Armazenamento", "name": "custeio_client_storage", "replicationFactor": 2, "icon": "custeio_client_storage", "description": "Link: Cliente - Armazenamento", "users": ["u_globomap_driver_custeio"]},
        {"alias": "Target", "name": "galeb_target", "replicationFactor": 2, "icon": "galeb_target", "description": "Target", "users": ["u_globomap_driver_galeb"]},
        {"alias": "Link: Volume - Export", "name": "volume_export", "replicationFactor": 2, "icon": "volume_export", "description": "Link: Volume - Export", "users": ["u_globomap_driver_faas"]},
        {"alias": "Link: Subcomponente - Equipamento", "name": "custeio_sub_component_comp_unit", "replicationFactor": 2, "icon": "custeio_sub_component_comp_unit", "description": "Link: Subcomponente - Equipamento", "users": ["u_globomap_driver_cmdb", "u_globomap_driver_acs"]},
        {"alias": "Link: Serviço de Negócio - Componente", "name": "custeio_business_service_component", "replicationFactor": 2, "icon": "custeio_business_service_component", "description": "Link: Serviço de Negócio - Componente", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "ACL", "name": "access", "replicationFactor": 2, "icon": "access", "description": "ACL", "users": ["u_globomap_driver_aclapi"]},
        {"alias": "Link: Processo - Serviço de Negócio", "name": "custeio_process_business_service", "replicationFactor": 2, "icon": "custeio_process_business_service", "description": "Link: Processo - Serviço de Negócio", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Link: Ambiente de Rede - VLAN", "name": "environment_vlan", "replicationFactor": 2, "icon": "environment_vlan", "description": "Link: Ambiente de Rede - VLAN", "users": ["u_globomap_driver_napi"]},
        {"alias": "Link: Pool - Equipamento", "name": "pool_comp_unit", "replicationFactor": 2, "icon": "pool_comp_unit", "description": "Link: Pool - Equipamento", "users": ["u_globomap_driver_napi"]},
        {"alias": "Link: Componente - Subcomponente", "name": "custeio_component_sub_component", "replicationFactor": 2, "icon": "custeio_component_sub_component", "description": "Link: Componente - Subcomponente", "users": ["u_globomap_driver_dicionario"]},
        {"alias": "Link: Acesso para Internet", "name": "internet_access", "replicationFactor": 2, "icon": "internet_access", "description": "Link: Acesso para Internet", "users": ["u_globomap_driver_gproxy"]},
        {"alias": "Link: Swift Account Tsuru Service Instance", "name": "swift_account_tsuru_service_instance", "replicationFactor": 2, "icon": "swift_account_tsuru_service_instance", "description": "Swift Account Tsuru Service Instance", "users": ["u_globomap_driver_swift"]},
        {"alias": "Link: Pool - Equipamento", "name": "tsuru_pool_comp_unit", "replicationFactor": 2, "icon": "tsuru_pool_comp_unit", "description": "Link: Pool - Equipamento", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "Link: Produto - Armazenamento", "name": "custeio_product_storage", "replicationFactor": 2, "icon": "custeio_product_storage", "description": "Link: Produto - Armazenamento", "users": ["u_globomap_driver_custeio"]},
        {"alias": "Link: VLAN - Rede", "name": "vlan_network", "replicationFactor": 2, "icon": "vlan_network", "description": "Link: VLAN - Rede", "users": ["u_globomap_driver_napi"]},
        {"alias": "Link: Acesso do Time", "name": "team_access", "replicationFactor": 2, "icon": "team_access", "description": "Link: Acesso do Time", "users": ["u_globomap_driver_tzion"]},
        {"alias": "Link: Ambiente Pai", "name": "father_environment", "replicationFactor": 2, "icon": "father_environment", "description": "Link: Ambiente Pai", "users": ["u_globomap_driver_napi"]},
        {"alias": "Link: Virtual Host - Rule", "name": "galeb_virtual_host_rule", "replicationFactor": 2, "icon": "galeb_virtual_host_rule", "description": "Link: Virtual Host - Rule", "users": ["u_globomap_driver_galeb"]},
        {"alias": "Link Servico - Instancia Tsuru", "name": "tsuru_service_service_instance", "replicationFactor": 2, "icon": "tsuru_service_service_instance", "description": "Link Servico - Instancia Tsuru", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "Link: Rede - Equipamento", "name": "network_comp_unit", "replicationFactor": 2, "icon": "network_comp_unit", "description": "Link: Rede - Equipamento", "users": ["u_globomap_driver_napi"]},
        {"alias": "Link: Componente - Armazenamento", "name": "custeio_component_storage", "replicationFactor": 2, "icon": "custeio_component_storage", "description": "Link: Componente - Armazenamento", "users": ["u_globomap_driver_custeio"]},
        {"alias": "Link: Rule - Pool", "name": "galeb_rule_pool", "replicationFactor": 2, "icon": "galeb_rule_pool", "description": "Link: Rule - Pool", "users": ["u_globomap_driver_galeb"]},
        {"alias": "Link: Export - Snapshot", "name": "export_snapshot", "replicationFactor": 2, "icon": "export_snapshot", "description": "Link: Export - Snapshot", "users": ["u_globomap_driver_faas"]},
        {"alias": "Link: Pool - App", "name": "tsuru_pool_app", "replicationFactor": 2, "icon": "tsuru_pool_app", "description": "Link: Pool - App", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "Link: Zona - Região", "name": "zone_region", "replicationFactor": 2, "icon": "zone_region", "description": "Link: Zona - Região", "users": ["u_globomap_driver_acs"]},
        {"alias": "Keystone Role", "name": "ks_role", "replicationFactor": 2, "icon": "ks_role", "description": "Keystone Role", "users": ["u_globomap_driver_keystone"]},
        {"alias": "Link: Cliente - Equipamento", "name": "custeio_client_comp_unit", "replicationFactor": 2, "icon": "custeio_client_comp_unit", "description": "Link: Cliente - Equipamento", "users": ["u_globomap_driver_cmdb", "u_globomap_driver_acs"]},
        {"alias": "Link: Subcomponente - Armazenamento", "name": "custeio_sub_component_storage", "replicationFactor": 2, "icon": "custeio_sub_component_storage", "description": "Link: Subcomponente - Armazenamento", "users": ["u_globomap_driver_custeio"]},
        {"alias": "Link: Zabbix - Recurso de Rede", "name": "zabbix_link", "replicationFactor": 2, "icon": "zabbix_link", "description": "Link: Zabbix - Recurso de Rede", "users": ["u_globomap_driver_zabbix"]},
        {"alias": "Link: Zona - Host", "name": "zone_host", "replicationFactor": 2, "icon": "zone_host", "description": "Link: Zona - Host", "users": ["u_globomap_driver_acs"]},
        {"alias": "Link: Host - Equipamento", "name": "host_comp_unit", "replicationFactor": 2, "icon": "host_comp_unit", "description": "Link: Host - Equipamento", "users": ["u_globomap_driver_acs"]},
        {"alias": "Link App - Instancia Tsuru", "name": "tsuru_app_service_instance", "replicationFactor": 2, "icon": "tsuru_app_service_instance", "description": "Link App - Instancia Tsuru", "users": ["u_globomap_driver_tsuru"]},
        {"alias": "Link: DNS - Recurso", "name": "dns_link", "replicationFactor": 2, "icon": "dns_link", "description": "Link: DNS - Recurso", "users": ["u_globomap_driver_dns"]},
        {"alias": "Link: Foreman Host - Classe do Puppet", "name": "foreman_host_puppet_class", "replicationFactor": 2, "icon": "foreman_host_puppet_class", "description": "Link: Foreman Host - Classe do Puppet", "users": ["u_globomap_driver_foreman"]},
        {"alias": "Swift Account Keystone Project", "name": "swift_account_ks_project", "replicationFactor": 2, "icon": "swift_account_ks_project", "description": "Swift Account Keystone Project", "users": ["u_globomap_driver_swift"]},
        {"alias": "Link: Grupo LDAP - Usuário", "name": "ldap_group_user", "replicationFactor": 2, "icon": "ldap_group_user", "description": "Link: Grupo LDAP - Usuário", "users": ["u_globomap_driver_authapi"]},
        {"alias": "Porta do VIP", "name": "port", "replicationFactor": 2, "icon": "port", "description": "Porta do VIP", "users": ["u_globomap_driver_napi"]},
        {"alias": "Link: Componente - Equipamento", "name": "custeio_component_comp_unit", "replicationFactor": 2, "icon": "custeio_component_comp_unit", "description": "Link: Componente - Equipamento", "users": ["u_globomap_driver_cmdb", "u_globomap_driver_acs"]},
        {"alias": "Link: DNS - Certificado", "name": "dns_domain", "replicationFactor": 2, "icon": "dns_domain", "description": "Link: DNS - Certificado", "users": ["u_globomap_driver_domain"]},
        {"alias": "Link: Serviço de Negocio - Armazenamento", "name": "custeio_business_service_storage", "replicationFactor": 2, "icon": "custeio_business_service_storage", "description": "Link: Serviço de Negocio - Armazenamento", "users": ["u_globomap_driver_custeio"]},
        {"alias": "Link: Database - DNS", "name": "database_dns", "replicationFactor": 2, "icon": "database_dns", "description": "Link: Database - DNS", "users": ["u_globomap_driver_dbaas"]},
        {"alias": "Link: Produto - Equipamento", "name": "custeio_product_comp_unit", "replicationFactor": 2, "icon": "custeio_product_comp_unit", "description": "Link: Produto - Equipamento", "users": ["u_globomap_driver_cmdb", "u_globomap_driver_acs"]},
        {"alias": "Link: Equipamento - DB", "name": "comp_unit_database", "replicationFactor": 2, "icon": "comp_unit_database", "description": "Link: Equipamento - DB", "users": ["u_globomap_driver_dbaas"]}
    ]

    for edge in edges:
        try:
            response = session.request(
                'POST',
                '{}/v2/edges/'.format(os.getenv('GLOBOMAP_API_URL')),
                data=json.dumps(edge),
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': 'Token token={}'.format(token)
                },
                verify=False
            )
        except Exception:
            print("create edge '{}' error".format(edge['name']))
            sys.exit(response.json())
        else:
            print("create edge '{}' ok...".format(edge['name']))
            content = response.json()
            print(response.status_code)
            print(content)

    graphs = [
        {"name": "foreman", "alias": "Foreman", "icon": "foreman", "description": "", "links": [{"edge": "foreman_host_dns", "from_collections": ["foreman_host"], "to_collections": ["dns"]}, {"edge": "foreman_host_puppet_class", "from_collections": ["foreman_host"], "to_collections": ["foreman_puppet_class"]}]},
        {"name": "keystone", "alias": "Keystone", "icon": "keystone", "description": "", "links": [{"edge": "ks_role", "from_collections": ["ks_project"], "to_collections": ["ks_user"]}]},
        {"name": "acl", "alias": "ACL", "icon": "acl", "description": "", "links": [{"edge": "access", "from_collections": ["environment", "comp_unit", "network"], "to_collections": ["comp_unit", "network", "vip"]}]},
        {"name": "dns", "alias": "DNS", "icon": "dns", "description": "", "links": [{"edge": "dns_link", "from_collections": ["dns"], "to_collections": ["comp_unit", "dns", "vip"]}]},
        {"name": "swift", "alias": "Swift", "icon": "swift", "description": "", "links": [{"edge": "swift_account_tsuru_service_instance", "from_collections": ["swift_account"], "to_collections": ["tsuru_service_instance"]}, {"edge": "swift_account_ks_project", "from_collections": ["swift_account"], "to_collections": ["ks_project"]}]},
        {"name": "cloud_stack", "alias": "Cloud Stack", "icon": "cloud_stack", "description": "", "links": [{"edge": "host_comp_unit", "from_collections": ["comp_unit"], "to_collections": ["comp_unit"]}, {"edge": "zone_host", "from_collections": ["zone"], "to_collections": ["comp_unit"]}, {"edge": "zone_region", "from_collections": ["region"], "to_collections": ["comp_unit"]}]},
        {"name": "database", "alias": "Banco de Dados", "icon": "database", "description": "", "links": [{"edge": "comp_unit_database", "from_collections": ["comp_unit"], "to_collections": ["database"]}, {"edge": "database_tsuru_service_instance", "from_collections": ["database"], "to_collections": ["tsuru_service_instance"]}, {"edge": "database_dns", "from_collections": ["database"], "to_collections": ["dns"]}]},
        {"name": "domain", "alias": "Certificado", "icon": "domain", "description": "", "links": [{"edge": "dns_domain", "from_collections": ["dns"], "to_collections": ["domain"]}]},
        {"name": "custeio", "alias": "Custeio", "icon": "custeio", "description": "", "links": [{"edge": "custeio_business_service_component", "from_collections": ["custeio_business_service"], "to_collections": ["custeio_component"]}, {"edge": "custeio_component_sub_component", "from_collections": ["custeio_component"], "to_collections": ["custeio_sub_component"]}, {"edge": "custeio_process_business_service", "from_collections": ["custeio_process"], "to_collections": ["custeio_business_service"]}, {"edge": "custeio_component_storage", "from_collections": ["custeio_component"], "to_collections": ["export", "volume"]}, {"edge": "custeio_business_service_storage", "from_collections": ["custeio_business_service"], "to_collections": ["export", "volume"]}, {"edge": "custeio_process_storage", "from_collections": ["custeio_process"], "to_collections": ["export", "volume"]}, {"edge": "custeio_client_storage", "from_collections": ["custeio_client"], "to_collections": ["export", "volume"]}, {"edge": "custeio_product_storage", "from_collections": ["custeio_product"], "to_collections": ["export", "volume"]}, {"edge": "custeio_sub_component_storage", "from_collections": ["custeio_sub_component"], "to_collections": ["export", "volume"]}, {"edge": "custeio_process_comp_unit", "from_collections": ["custeio_process"], "to_collections": ["comp_unit"]}, {"edge": "custeio_business_service_comp_unit", "from_collections": ["custeio_business_service"], "to_collections": ["comp_unit"]}, {"edge": "custeio_client_comp_unit", "from_collections": ["custeio_client"], "to_collections": ["comp_unit"]}, {"edge": "custeio_component_comp_unit", "from_collections": ["custeio_component"], "to_collections": ["comp_unit"]}, {"edge": "custeio_sub_component_comp_unit", "from_collections": ["custeio_sub_component"], "to_collections": ["comp_unit"]}, {"edge": "custeio_product_comp_unit", "from_collections": ["custeio_product"], "to_collections": ["comp_unit"]}]},
        {"name": "networking_topology", "alias": "Topologia de Rede", "icon": "networking_topology", "description": "", "links": [{"edge": "father_environment", "from_collections": ["environment"], "to_collections": ["environment"]}, {"edge": "environment_vlan", "from_collections": ["environment"], "to_collections": ["vlan"]}, {"edge": "vlan_network", "from_collections": ["vlan"], "to_collections": ["network"]}, {"edge": "network_comp_unit", "from_collections": ["network"], "to_collections": ["comp_unit"]}]},
        {"name": "permission", "alias": "Firewall", "icon": "permission", "description": "", "links": [{"edge": "ldap_group_user", "from_collections": ["ldap_group"], "to_collections": ["ldap_user"]}, {"edge": "team_access", "from_collections": ["ldap_group"], "to_collections": ["comp_unit", "network", "vip"]}, {"edge": "internet_access", "from_collections": ["comp_unit", "network"], "to_collections": ["tag_firewall"]}]},
        {"name": "load_balancing", "alias": "Balanceamento", "icon": "load_balancing", "description": "", "links": [{"edge": "port", "from_collections": ["vip"], "to_collections": ["pool"]}, {"edge": "pool_comp_unit", "from_collections": ["pool"], "to_collections": ["comp_unit"]}]},
        {"name": "galeb", "alias": "Galeb", "icon": "galeb", "description": "", "links": [{"edge": "galeb_virtual_host_rule", "from_collections": ["galeb_virtual_host"], "to_collections": ["galeb_rule"]}, {"edge": "galeb_rule_pool", "from_collections": ["galeb_rule"], "to_collections": ["galeb_pool"]}, {"edge": "galeb_target", "from_collections": ["galeb_pool"], "to_collections": ["comp_unit", "vip"]}]},
        {"name": "zabbix", "alias": "Zabbix", "icon": "zabbix", "description": "", "links": [{"edge": "zabbix_link", "from_collections": ["comp_unit", "pool", "vip"], "to_collections": ["zabbix_graph"]}]},
        {"name": "faas", "alias": "FaaS", "icon": "faas", "description": "", "links": [{"edge": "filer_volume", "from_collections": ["comp_unit"], "to_collections": ["volume"]}, {"edge": "volume_export", "from_collections": ["volume"], "to_collections": ["export"]}, {"edge": "export_snapshot", "from_collections": ["export"], "to_collections": ["snapshot"]}]},
        {"name": "tsuru", "alias": "Tsuru", "icon": "tsuru", "description": "", "links": [{"edge": "tsuru_pool_app", "from_collections": ["tsuru_pool"], "to_collections": ["tsuru_app"]}, {"edge": "tsuru_pool_comp_unit", "from_collections": ["tsuru_pool"], "to_collections": ["comp_unit"]}, {"edge": "tsuru_app_service_instance", "from_collections": ["tsuru_app"], "to_collections": ["tsuru_service_instance"]}, {"edge": "tsuru_service_service_instance", "from_collections": ["tsuru_service"], "to_collections": ["tsuru_service_instance"]}]}
    ]

    for graph in graphs:
        try:
            response = session.request(
                'POST',
                '{}/v2/graphs/'.format(os.getenv('GLOBOMAP_API_URL')),
                data=json.dumps(graph),
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': 'Token token={}'.format(token)
                },
                verify=False
            )
        except Exception:
            print("create graph '{}' error".format(graph['name']))
            sys.exit(response.json())
        else:
            print("create graph '{}' ok...".format(graph['name']))
            content = response.json()
            print(response.status_code)
            print(content)

    queries = [
        {"name": "ports_from_dns", "description": "Portas do DNS", "collection": "", "params": {"@dns": "dns", "@dns_link": "dns_link", "@vip": "vip", "@port": "port"}, "query": "FOR dns in @@dns\n    FILTER dns._id == @variable\n    FOR dns_link in @@dns_link\n        FILTER dns_link._from == dns._id\n        FOR vip in @@vip\n            FILTER dns_link._to == vip._id\n            LET ports = (\n                FOR port in @@port\n                    FILTER port._from == vip._id\n                    LET name = SPLIT(port.name,':')[0]\n                    RETURN DISTINCT TO_NUMBER(name)\n            )\n RETURN {\n    'name': dns.name,\n    'ports': ports                \n}"},
        {"name": "access_vip", "description": "Hosts com acesso ao VIP", "collection": "vip", "params": {"@access": "access", "@comp_unit": "comp_unit", "@dns": "dns", "@dns_link": "dns_link", "@environment": "environment", "@environment_vlan": "environment_vlan", "@network": "network", "@network_comp_unit": "network_comp_unit", "@vip": "vip", "@vlan": "vlan", "@vlan_network": "vlan_network"}, "query": "let vip_name = DOCUMENT(@variable).name\n\nlet dns_network = (\n    FOR doc1 IN @@vip \n        FILTER doc1._id LIKE @variable\n        FOR doc2 IN @@access \n            FILTER doc1.`_id` == doc2.`_to`\n            FOR doc3 IN @@network \n                FILTER doc2.`_from` == doc3.`_id`\n                FOR doc4 IN @@network_comp_unit \n                    FILTER doc3.`_id` == doc4.`_from`\n                    LET endpoints = ( \n                        FOR doc5 IN @@comp_unit \n                            FILTER doc4.`_to` == doc5.`_id`\n                            FOR doc6 IN @@dns_link \n                                FILTER doc5.`_id` == doc6.`_to`\n                                FOR doc7 IN @@dns \n                                    FILTER doc6.`_from` == doc7.`_id`\n                                    AND doc7.properties.content IN doc5.properties.ips \n                                        RETURN doc7.name\n                    )\n                    FILTER LENGTH(endpoints)> 0\n                        RETURN {\n                            'url': vip_name,\n                            'accessed_by': endpoints,\n                            'owner': doc2.properties.owner\n                        }\n)\n   \nLET dns_environment = (\n    FOR doc1 IN @@vip \n        FILTER doc1._id LIKE @variable\n        FOR doc2 IN @@access \n            FILTER doc1.`_id` == doc2.`_to`\n            FOR doc8 IN @@environment \n                FILTER doc2.`_from` == doc8.`_id`\n                FOR doc9 IN @@environment_vlan\n                    FILTER doc9.`_from` == doc8.`_id`\n                    FOR doc10 IN @@vlan\n                        FILTER doc9.`_to` == doc10.`_id`\n                        FOR doc11 IN @@vlan_network\n                            FILTER doc11.`_from` == doc10.`_id`                    \n                            FOR doc3 IN @@network \n                                FILTER doc11.`_to` == doc3.`_id`\n                                FOR doc4 IN @@network_comp_unit \n                                    FILTER doc3.`_id` == doc4.`_from`\n                                    LET endpoints = ( \n                                        FOR doc5 IN @@comp_unit \n                                            FILTER doc4.`_to` == doc5.`_id`\n                                            FOR doc6 IN @@dns_link \n                                                FILTER doc5.`_id` == doc6.`_to`\n                                                FOR doc7 IN @@dns \n                                                    FILTER doc6.`_from` == doc7.`_id`\n                                                    AND doc7.properties.content IN doc5.properties.ips \n                                                        RETURN doc7.name\n                                    )\n                                    FILTER LENGTH(endpoints)> 0\n                                        RETURN {\n                                            'url': vip_name,\n                                            'accessed_by': endpoints,\n                                            'owner': doc2.properties.owner\n                                        }\n)\n            \nLET dns_comp_unit = (\n    FOR doc1 IN @@vip \n        FILTER doc1._id LIKE @variable\n        FOR doc2 IN @@access \n            FILTER doc1.`_id` == doc2.`_to`\n            LET endpoints = ( \n                FOR doc5 IN @@comp_unit \n                    FILTER doc2.`_from` == doc5.`_id`\n                    FOR doc6 IN @@dns_link \n                        FILTER doc5.`_id` == doc6.`_to`\n                        FOR doc7 IN @@dns \n                            FILTER doc6.`_from` == doc7.`_id`\n                            AND doc7.properties.content IN doc5.properties.ips \n                                RETURN doc7.name\n                )\n                FILTER LENGTH(endpoints)> 0\n                    RETURN {\n                        'url': vip_name,\n                        'accessed_by': endpoints,\n                        'owner': doc2.properties.owner\n                    }\n)\n\nRETURN UNION(dns_environment, dns_comp_unit, dns_network)\n"},
        {"name": "lista_filas_subcomponente", "description": "Lista de Filas do Subcomponente", "collection": "", "params": {"@custeio_sub_component": "custeio_sub_component"}, "query": "FOR custeio_sub_component in @@custeio_sub_component\nFILTER custeio_sub_component.properties.status == 'Ativo'\nRETURN DISTINCT {\n    'id': custeio_sub_component.properties.queue.id_service_now,\n    'name':custeio_sub_component.properties.queue.nome\n}"},
        {"name": "dns_host_owner", "description": "Donos DNSs de host", "collection": "", "params": {"@dns": "dns", "@dns_link": "dns_link", "@comp_unit": "comp_unit", "@custeio_component_comp_unit": "custeio_component_comp_unit", "@custeio_component": "custeio_component", "@custeio_client_comp_unit": "custeio_client_comp_unit", "@custeio_client": "custeio_client", "@custeio_sub_component_comp_unit": "custeio_sub_component_comp_unit", "@custeio_sub_component": "custeio_sub_component"}, "query": "FOR dns IN @@dns\n    LET names = (\n        FOR dns_link IN @@dns_link\n            FILTER dns.`_id` == dns_link.`_from`\n            LET name = ( \n                FOR comp_unit IN @@comp_unit\n                    FILTER dns_link.`_to` == comp_unit.`_id`\n                    LET component = (\n                        FOR custeio_component_comp_unit in @@custeio_component_comp_unit\n                            FILTER custeio_component_comp_unit.`_to` == comp_unit.`_id`\n                            FOR custeio_component in @@custeio_component\n                                FILTER custeio_component_comp_unit.`_from` == custeio_component.`_id`\n                                RETURN  {\n                                    'name': custeio_component.name,\n                                    'queue': {\n                                        'id': custeio_component.properties.queue.id,\n                                        'name': custeio_component.properties.queue.nome\n                                    }\n                                }\n                    )\n                    LET client = (\n                        FOR custeio_client_comp_unit in @@custeio_client_comp_unit\n                            FILTER custeio_client_comp_unit.`_to` == comp_unit.`_id`\n                            FOR custeio_client in @@custeio_client\n                                FILTER custeio_client_comp_unit.`_from` == custeio_client.`_id`\n                                RETURN  {\n                                    'name': custeio_component.name,\n                                    'id': custeio_component.id\n                                }\n                    )\n                    LET sub_component = (\n                        FOR custeio_sub_component_comp_unit in @@custeio_sub_component_comp_unit\n                            FILTER custeio_sub_component_comp_unit.`_to` == comp_unit.`_id`\n                            FOR custeio_sub_component in @@custeio_sub_component\n                                FILTER custeio_sub_component_comp_unit.`_from` == custeio_sub_component.`_id`\n                                RETURN  {\n                                    'name': custeio_sub_component.name,\n                                    'queue': {\n                                        'id': custeio_sub_component.properties.queue.id,\n                                        'name': custeio_sub_component.properties.queue.nome\n                                    }\n                                }\n                    )\n                    LET new_component = FIRST(component)\n                    LET new_sub_component = FIRST(sub_component)\n                    LET new_client = FIRST(client)\n                    RETURN {\n                        'sub_component': new_sub_component,\n                        'client': new_client,\n                        'component': new_component\n                    } \n            )\n            RETURN FIRST(name)\n    )\n    LET new_name = FIRST(names)\n    FILTER new_name != null\n    RETURN {\n        'DNS': dns.name,\n        'sub_component':new_name.sub_component,\n        'client':new_name.client,\n        'component':new_name.component\n    }\n"},
        {"name": "host_vip", "description": "Hosts físicos com/sem VMs dentro de Vip", "collection": "comp_unit", "params": {"@comp_unit": "comp_unit", "@host_comp_unit": "host_comp_unit", "@pool": "pool", "@pool_comp_unit": "pool_comp_unit", "@port": "port", "@vip": "vip"}, "query": "LET comp_units_1 = UNIQUE(\n    FOR comp_unit IN @@comp_unit\n        FILTER comp_unit._id == @variable\n        FOR pool_comp_unit IN @@pool_comp_unit\n            FILTER pool_comp_unit._to == comp_unit._id\n            FOR pool IN @@pool\n                FILTER pool_comp_unit._from == pool._id\n                FOR port IN @@port\n                    FILTER port._to == pool._id\n                    FOR vip in @@vip\n                        FILTER port._from == vip._id\n                        RETURN vip.name\n    )\n    LET comp_units_2 = UNIQUE(\n        FOR host IN @@comp_unit\n            FILTER host._id == @variable\n            FOR host_comp_unit IN @@host_comp_unit\n                FILTER host_comp_unit._from == host._id\n                FOR comp IN @@comp_unit\n                    FILTER host_comp_unit._to == comp._id\n                    FOR pool_comp_unit IN @@pool_comp_unit\n                        FILTER pool_comp_unit._to == comp._id\n                        FOR pool IN @@pool\n                            FILTER pool_comp_unit._from == pool._id\n                            FOR port IN @@port\n                                FILTER port._to == pool._id\n                                FOR vip IN @@vip\n                                    FILTER port._from == vip._id\n                                    RETURN vip.name\n    )\n    LET vips = UNION(comp_units_1, comp_units_2)\n    RETURN {\n        'vips': vips\n    }"},
        {"name": "real_by_vip", "description": "Hosts de um VIP", "collection": "vip", "params": {"@collection1": "vip", "@collection2": "port", "@collection3": "pool", "@collection4": "pool_comp_unit", "@collection5": "comp_unit"}, "query": "FOR doc1 IN @@collection1\n    FILTER doc1.`_id` == @variable\n    LET ports = (\n    FOR doc2 IN @@collection2\n        FILTER doc1.`_id` == doc2.`_from`\n        LET pool = (\n        FOR doc3 IN @@collection3\n            FILTER doc2.`_to` == doc3.`_id`                \n            FOR doc4 IN @@collection4\n                FILTER doc3.`_id` == doc4.`_from`                    \n                FOR doc5 IN @@collection5\n                    FILTER doc4.`_to` == doc5.`_id`\n                    RETURN doc5.name                    \n        )\n        LET name = FIRST(FILTER doc2.properties.l7_rule == 'Default VIP' RETURN '/') || doc2.properties.l7_rule\n        RETURN {\n            'path': name,\n            'port': doc2.properties.port,\n            'servers': pool\n        }\n    )     \n    RETURN {\n        'name': doc1.name,\n        'ports':ports\n    }\n"},
        {"name": "name_router_acs", "description": "Nome das VM routers do ACS", "collection": "", "params": {"@dns": "dns", "@dns_link": "dns_link", "@comp_unit": "comp_unit"}, "query": "FOR dns IN @@dns\n  FOR dns_link IN @@dns_link\n    FILTER dns_link._from == dns._id\n    FOR comp_unit IN @@comp_unit\n        FILTER dns_link._to == comp_unit._id AND comp_unit.name == '' AND dns.`name` =~ '^((r\\-)([0-9]+)\\-(vm|vmdev)\\.([0-9a-z]+)-([0-9]+)\\.cp\\.globoi\\.com)$'\n        LET name = SPLIT(dns.name, '.')[0]\n        UPDATE { _key: comp_unit._key, name: name } IN @@comp_unit\n"},
        {"name": "dns_onwer", "description": "Dono do DNS", "collection": "dns", "params": {"@comp_unit": "comp_unit", "@custeio_sub_component": "custeio_sub_component", "@custeio_sub_component_comp_unit": "custeio_sub_component_comp_unit", "@dns": "dns", "@dns_link": "dns_link", "@galeb_virtual_host": "galeb_virtual_host", "@pool": "pool", "@pool_comp_unit": "pool_comp_unit", "@port": "port", "@tsuru_app": "tsuru_app", "@vip": "vip"}, "query": "LET vip_redirect = ['redirect.globo.com', 'redirect2.globo.com']\nFOR dns IN @@dns\n    FILTER dns._id == @variable\n    \n    LET is_vip = IS_NULL((\n        FOR v\n          IN 1..8\n          OUTBOUND dns._id\n          GRAPH 'dns'\n         FILTER v._id LIKE 'vip%'\n        RETURN True\n    )[0])? False : True\n    LET is_host = IS_NULL((\n        FOR v\n          IN 1..8\n          OUTBOUND dns._id\n          GRAPH 'dns'\n         FILTER v._id LIKE 'comp_unit%'\n        RETURN True\n    )[0])? False : True\n    \n    LET onwer_vip = (\n        FILTER is_vip == True\n        \n        LET is_rpaas = IS_NULL((\n            FOR dns_link IN @@dns_link\n                FILTER dns.`_id` == dns_link.`_from`\n                FOR vip IN @@vip\n                    FILTER dns_link.`_to` == vip.`_id` AND vip.name LIKE '%rpaas%'\n                    RETURN True\n        )[0])? False : True\n    \n        LET team_tsuru = (\n            FILTER is_rpaas == True\n            FOR tsuru_app IN @@tsuru_app\n                FILTER dns.name in tsuru_app.properties.addresses\n                RETURN tsuru_app.properties.team_owner\n        )[0]\n    \n        LET is_galeb = IS_NULL((\n            FILTER is_rpaas == False\n            FOR dns_link IN @@dns_link\n                FILTER dns.`_id` == dns_link.`_from`\n                FOR vip IN @@vip\n                    FILTER dns_link.`_to` == vip.`_id`\n                    FOR port IN @@port\n                        FILTER port.`_from` == vip.`_id` AND port.properties.l7_rule == 'Default VIP'\n                        FOR pool IN @@pool\n                            FILTER port.`_to` == pool.`_id` AND pool.name LIKE '%galeb%'\n                            RETURN 1\n        )[0])? False : True\n        LET project_galeb = (\n            FILTER is_galeb == True\n            FOR galeb_virtual_host IN @@galeb_virtual_host\n                FILTER dns.name == galeb_virtual_host.name\n                RETURN galeb_virtual_host.properties.project\n        )[0]\n\n        LET acs = (\n            FILTER is_galeb == False AND is_rpaas == False\n            FOR dns_link IN @@dns_link\n                FILTER dns.`_id` == dns_link.`_from`\n                FOR vip IN @@vip\n                    FILTER dns_link.`_to` == vip.`_id` and vip.name NOT IN vip_redirect\n                    FOR port IN @@port\n                        FILTER port.`_from` == vip.`_id` AND port.properties.l7_rule == 'Default VIP'\n                        FOR pool IN @@pool\n                            FILTER port.`_to` == pool.`_id` AND pool.name LIKE 'ACS%'\n                            FOR pool_comp_unit IN @@pool_comp_unit\n                                FILTER pool.`_id` == pool_comp_unit.`_from`                    \n                                FOR comp_unit IN @@comp_unit\n                                    FILTER pool_comp_unit.`_to` == comp_unit.`_id`\n                                    RETURN { \n                                        'account': comp_unit.properties.account,\n                                        'project': comp_unit.properties.project\n                                    }\n        )[0]\n        \n        LET redirect = (\n            FILTER is_galeb == False AND is_rpaas == False and IS_NULL(acs)\n            FOR v\n              IN 1..8\n              OUTBOUND dns._id\n              GRAPH 'dns'\n             FILTER v._id LIKE 'vip%' AND v.name IN vip_redirect\n            RETURN True\n        )[0]\n        \n        LET subcomponente = (\n            FILTER is_galeb == False AND is_rpaas == False AND IS_NULL(redirect)\n            FOR dns_link IN @@dns_link\n                FILTER dns.`_id` == dns_link.`_from`\n                FOR vip IN @@vip\n                    FILTER dns_link.`_to` == vip.`_id`\n                    FOR port IN @@port\n                        FILTER port.`_from` == vip.`_id` AND port.properties.l7_rule == 'Default VIP'\n                        FOR pool IN @@pool\n                            FILTER port.`_to` == pool.`_id`\n                            FOR pool_comp_unit IN @@pool_comp_unit\n                                FILTER pool.`_id` == pool_comp_unit.`_from`                    \n                                FOR comp_unit IN @@comp_unit\n                                    FILTER pool_comp_unit.`_to` == comp_unit.`_id`\n                                    FOR custeio_sub_component_comp_unit in @@custeio_sub_component_comp_unit\n                                        FILTER custeio_sub_component_comp_unit.`_to` == comp_unit.`_id`\n                                        FOR custeio_sub_component in @@custeio_sub_component\n                                            FILTER custeio_sub_component_comp_unit.`_from` == custeio_sub_component.`_id`\n                                            RETURN  {\n                                                'name': custeio_sub_component.name,\n                                                'queue': {\n                                                    'id': custeio_sub_component.properties.queue.id,\n                                                    'name': custeio_sub_component.properties.queue.nome\n                                                }\n                                            }\n        )[0]\n        \n        RETURN {\n            'dns': dns.name, \n            'team_tsuru': team_tsuru,\n            'project_galeb':project_galeb,\n            'acs':acs,\n            'redirect': redirect,\n            'subcomponent': subcomponente\n        }\n    )[0]\n    \n    \n    LET onwer_host = (\n        FILTER is_host == True\n        \n        FOR dns_link IN @@dns_link\n            FILTER dns.`_id` == dns_link.`_from`\n              FOR comp_unit IN @@comp_unit\n                    FILTER dns_link.`_to` == comp_unit.`_id`\n                    LET subcomponent = ( \n                        FOR custeio_sub_component_comp_unit in @@custeio_sub_component_comp_unit\n                            FILTER custeio_sub_component_comp_unit.`_to` == comp_unit.`_id`\n                            FOR custeio_sub_component in @@custeio_sub_component\n                                FILTER custeio_sub_component_comp_unit.`_from` == custeio_sub_component.`_id`\n                                RETURN {\n                                    'name': custeio_sub_component.name,\n                                    'queue': {\n                                        'id': custeio_sub_component.properties.queue.id,\n                                        'name': custeio_sub_component.properties.queue.nome\n                                    }\n                                }\n                    )\n                    LET acs = { \n                        'account': comp_unit.properties.account,\n                        'project': comp_unit.properties.project\n                    }\n        \n        RETURN {\n            'dns': dns.name, \n            'acs':acs,\n            'subcomponent': subcomponent\n        }\n    )[0]\n\n    LET empty_result = {'dns': dns.name, 'acs': '-', 'subcomponent': '-'}\n    LET empty = NOT is_vip && NOT is_host ? empty_result : null\n    LET onwer = IS_NULL(empty) ? (is_vip ? onwer_vip : onwer_host) : empty\n\n    RETURN onwer"},
        {"name": "dns_vip_owner", "description": "Donos DNSs de VIP", "collection": "", "params": {"@dns": "dns", "@dns_link": "dns_link", "@vip": "vip", "@port": "port", "@pool": "pool", "@pool_comp_unit": "pool_comp_unit", "@comp_unit": "comp_unit", "@custeio_component_comp_unit": "custeio_component_comp_unit", "@custeio_component": "custeio_component", "@custeio_client_comp_unit": "custeio_client_comp_unit", "@custeio_client": "custeio_client", "@custeio_sub_component_comp_unit": "custeio_sub_component_comp_unit", "@custeio_sub_component": "custeio_sub_component"}, "query": "FOR dns IN @@dns\n    LET names = (\n        FOR dns_link IN @@dns_link\n            FILTER dns.`_id` == dns_link.`_from`\n            LET name = ( \n                FOR vip IN @@vip\n                    FILTER dns_link.`_to` == vip.`_id`\n                    FOR port IN @@port\n                        FILTER port.`_from` == vip.`_id`\n                        FOR pool IN @@pool\n                            FILTER port.`_to` == pool.`_id`                \n                            FOR pool_comp_unit IN @@pool_comp_unit\n                                FILTER pool.`_id` == pool_comp_unit.`_from`                    \n                                FOR comp_unit IN @@comp_unit\n                                    FILTER pool_comp_unit.`_to` == comp_unit.`_id`\n                                    LET component = (\n                                        FOR custeio_component_comp_unit in @@custeio_component_comp_unit\n                                            FILTER custeio_component_comp_unit.`_to` == comp_unit.`_id`\n                                            FOR custeio_component in @@custeio_component\n                                                FILTER custeio_component_comp_unit.`_from` == custeio_component.`_id`\n                                                RETURN  {\n                                                    'name': custeio_component.name,\n                                                    'queue': {\n                                                        'id': custeio_component.properties.queue.id,\n                                                        'name': custeio_component.properties.queue.nome\n                                                    }\n                                                }\n                                    )\n                                    LET client = (\n                                        FOR custeio_client_comp_unit in @@custeio_client_comp_unit\n                                            FILTER custeio_client_comp_unit.`_to` == comp_unit.`_id`\n                                            FOR custeio_client in @@custeio_client\n                                                FILTER custeio_client_comp_unit.`_from` == custeio_client.`_id`\n                                                RETURN  {\n                                                    'name': custeio_component.name,\n                                                    'id': custeio_component.id\n                                                }\n                                    )\n                                    LET sub_component = (\n                                        FOR custeio_sub_component_comp_unit in @@custeio_sub_component_comp_unit\n                                            FILTER custeio_sub_component_comp_unit.`_to` == comp_unit.`_id`\n                                            FOR custeio_sub_component in @@custeio_sub_component\n                                                FILTER custeio_sub_component_comp_unit.`_from` == custeio_sub_component.`_id`\n                                                RETURN  {\n                                                    'name': custeio_sub_component.name,\n                                                    'queue': {\n                                                        'id': custeio_sub_component.properties.queue.id,\n                                                        'name': custeio_sub_component.properties.queue.nome\n                                                    }\n                                                }\n                                    )\n                                    LET redirect = FIRST(FILTER vip.name == 'redirect.globo.com' RETURN 'SIM') || 'NAO'\n                                    LET new_component = FIRST(component)\n                                    LET new_sub_component = FIRST(sub_component)\n                                    LET new_client = FIRST(client)\n                                    RETURN {\n                                        'sub_component': new_sub_component,\n                                        'client': new_client,\n                                        'component': new_component,\n                                        'redirect': redirect\n                                    } \n            )\n            RETURN FIRST(name)\n    )\n    LET new_name = FIRST(names)\n    FILTER new_name != null\n    RETURN {\n        'DNS': dns.name,\n        'sub_component':new_name.sub_component,\n        'client':new_name.client,\n        'component':new_name.component,\n        'redirect':new_name.redirect\n    }\n"},
        {"name": "vip_access_vip", "description": "Clientes de uma APP", "collection": "vip", "params": {"@vip": "vip", "@access": "access", "@comp_unit": "comp_unit", "@pool_comp_unit": "pool_comp_unit", "@pool": "pool", "@port": "port", "@network": "network", "@network_comp_unit": "network_comp_unit", "@environment": "environment", "@environment_vlan": "environment_vlan", "@vlan": "vlan", "@vlan_network": "vlan_network"}, "query": "LET vips_comp_unit = (\n    FOR vip IN @@vip\n        FILTER vip._id == @variable\n        FOR access IN @@access\n            FILTER access._to == vip._id\n            FOR comp_unit IN @@comp_unit\n                FILTER access._from == comp_unit._id\n                FOR pool_comp_unit IN @@pool_comp_unit\n                    FILTER pool_comp_unit._to == comp_unit._id\n                    FOR pool IN @@pool\n                        FILTER pool_comp_unit._from == pool._id\n                        FOR port in @@port\n                            FILTER port._to == pool._id\n                            FOR vip1 in @@vip\n                                FILTER port._from == vip1._id\n                                RETURN DISTINCT vip1.name         \n)\n\nLET vips_environment = (\n    FOR vip IN @@vip\n        FILTER vip._id == @variable\n        FOR access IN @@access\n            FILTER access._to == vip._id\n            FOR environment in @@environment\n                FILTER access._from == environment._id\n                FOR environment_vlan IN @@environment_vlan\n                    FILTER environment_vlan._from == environment._id\n                    FOR vlan in @@vlan\n                        FILTER environment_vlan._to == vlan._id\n                        FOR vlan_network in @@vlan_network\n                            FILTER vlan_network._from == vlan._id\n                            FOR network in @@network\n                                FILTER vlan_network._to == network._id\n                                FOR network_comp_unit IN @@network_comp_unit\n                                    FILTER network_comp_unit._from == network._id\n                                    FOR comp_unit IN @@comp_unit\n                                        FILTER network_comp_unit._to == comp_unit._id                    \n                                        FOR pool_comp_unit IN @@pool_comp_unit\n                                            FILTER pool_comp_unit._to == comp_unit._id\n                                            FOR pool IN @@pool\n                                                FILTER pool_comp_unit._from == pool._id\n                                                FOR port in @@port\n                                                    FILTER port._to == pool._id\n                                                    FOR vip3 in @@vip\n                                                        FILTER port._from == vip3._id\n                                                        RETURN DISTINCT vip3.name         \n)\n\nLET vips_network = ( \n    FOR vip IN @@vip\n        FILTER vip._id == @variable\n        FOR access IN @@access\n            FILTER access._to == vip._id\n                FOR network in @@network\n                    FILTER access._from == network._id\n                    FOR network_comp_unit IN @@network_comp_unit\n                        FILTER network_comp_unit._from == network._id\n                        FOR comp_unit IN @@comp_unit\n                            FILTER network_comp_unit._to == comp_unit._id                    \n                            FOR pool_comp_unit IN @@pool_comp_unit\n                                FILTER pool_comp_unit._to == comp_unit._id\n                                FOR pool IN @@pool\n                                    FILTER pool_comp_unit._from == pool._id\n                                    FOR port in @@port\n                                        FILTER port._to == pool._id\n                                        FOR vip2 in @@vip\n                                            FILTER port._from == vip2._id \n                                            FILTER vip.id != vip2.id\n                                            SORT vip2.name DESC\n                                            RETURN DISTINCT vip2.name         \n)\nRETURN {'vips': UNION_DISTINCT(vips_environment, vips_comp_unit, vips_network)}"},
        {"name": "vip_access_vip_custom_maps", "description": "Clientes de uma APP", "collection": "dns", "params": {"@dns_link": "dns_link", "@vip": "vip", "@access": "access", "@comp_unit": "comp_unit", "@pool_comp_unit": "pool_comp_unit", "@pool": "pool", "@port": "port", "@environment": "environment", "@environment_vlan": "environment_vlan", "@vlan": "vlan", "@vlan_network": "vlan_network", "@network": "network", "@network_comp_unit": "network_comp_unit"}, "query": "LET vips_comp_unit = (\n    FOR dns_link IN @@dns_link\n        FILTER dns_link._from == @variable\n        FOR vip IN @@vip\n            FILTER vip._id == dns_link._to\n            FOR access IN @@access\n                FILTER access._to == vip._id\n                FOR comp_unit IN @@comp_unit\n                    FILTER access._from == comp_unit._id\n                    FOR pool_comp_unit IN @@pool_comp_unit\n                        FILTER pool_comp_unit._to == comp_unit._id\n                        FOR pool IN @@pool\n                            FILTER pool_comp_unit._from == pool._id\n                            FOR port in @@port\n                                FILTER port._to == pool._id\n                                FOR vip1 in @@vip\n                                    FILTER port._from == vip1._id\n                                    RETURN DISTINCT vip1\n)\n\nLET vips_environment = (\n    FOR dns_link IN @@dns_link\n        FILTER dns_link._from == @variable\n        FOR vip IN @@vip\n            FILTER vip._id == dns_link._to\n            FOR access IN @@access\n                FILTER access._to == vip._id\n                FOR environment in @@environment\n                    FILTER access._from == environment._id\n                    FOR environment_vlan IN @@environment_vlan\n                        FILTER environment_vlan._from == environment._id\n                        FOR vlan in @@vlan\n                            FILTER environment_vlan._to == vlan._id\n                            FOR vlan_network in @@vlan_network\n                                FILTER vlan_network._from == vlan._id\n                                FOR network in @@network\n                                    FILTER vlan_network._to == network._id\n                                    FOR network_comp_unit IN @@network_comp_unit\n                                        FILTER network_comp_unit._from == network._id\n                                        FOR comp_unit IN @@comp_unit\n                                            FILTER network_comp_unit._to == comp_unit._id                    \n                                            FOR pool_comp_unit IN @@pool_comp_unit\n                                                FILTER pool_comp_unit._to == comp_unit._id\n                                                FOR pool IN @@pool\n                                                    FILTER pool_comp_unit._from == pool._id\n                                                    FOR port in @@port\n                                                        FILTER port._to == pool._id\n                                                        FOR vip3 in @@vip\n                                                            FILTER port._from == vip3._id\n                                                            RETURN DISTINCT vip3\n)\n\nLET vips_network = (\n    FOR dns_link IN @@dns_link\n        FILTER dns_link._from == @variable\n        FOR vip IN @@vip\n            FILTER vip._id == dns_link._to\n            FOR access IN @@access\n                FILTER access._to == vip._id\n                    FOR network in @@network\n                        FILTER access._from == network._id\n                        FOR network_comp_unit IN @@network_comp_unit\n                            FILTER network_comp_unit._from == network._id\n                            FOR comp_unit IN @@comp_unit\n                                FILTER network_comp_unit._to == comp_unit._id                    \n                                FOR pool_comp_unit IN @@pool_comp_unit\n                                    FILTER pool_comp_unit._to == comp_unit._id\n                                    FOR pool IN @@pool\n                                        FILTER pool_comp_unit._from == pool._id\n                                        FOR port in @@port\n                                            FILTER port._to == pool._id\n                                            FOR vip2 in @@vip\n                                                FILTER port._from == vip2._id \n                                                FILTER vip.id != vip2.id\n                                                SORT vip2.name DESC\n                                                RETURN DISTINCT vip2\n)\nRETURN UNION_DISTINCT(vips_environment, vips_comp_unit, vips_network)"},
        {"name": "vip_vip_custom_maps", "description": "Dependências de uma APP", "collection": "dns", "params": {"@dns_link": "dns_link", "@vip": "vip", "@port": "port", "@pool_comp_unit": "pool_comp_unit", "@network_comp_unit": "network_comp_unit", "@access": "access", "@vlan_network": "vlan_network", "@environment_vlan": "environment_vlan"}, "query": "LET vips_network = UNIQUE(\n    FOR dns_link IN @@dns_link\n        FILTER dns_link._from == @variable\n        FOR vip IN @@vip\n            FILTER vip._id == dns_link._to\n\n            FOR port in @@port\n                FILTER port._from == vip._id\n                FOR pool_comp_unit IN @@pool_comp_unit\n                    FILTER pool_comp_unit._from == port._to\n                    FOR network_comp_unit IN @@network_comp_unit\n                        FILTER network_comp_unit._to == pool_comp_unit._to\n                        FOR access IN @@access\n                            FILTER access._from == network_comp_unit._from\n                            FOR vip1 IN @@vip\n                                FILTER access._to == vip1._id\n                                RETURN vip1\n)\n\nLET vips_environment = UNIQUE(\n    FOR dns_link IN @@dns_link\n        FILTER dns_link._from == @variable\n        FOR vip IN @@vip\n            FILTER vip._id == dns_link._to\n\n            FOR port in @@port\n                FILTER port._from == vip._id\n                FOR pool_comp_unit IN @@pool_comp_unit\n                    FILTER pool_comp_unit._from == port._to\n                    FOR network_comp_unit IN @@network_comp_unit\n                        FILTER network_comp_unit._to == pool_comp_unit._to\n                        FOR vlan_network in @@vlan_network\n                            FILTER vlan_network._to == network_comp_unit._from\n                            FOR environment_vlan IN @@environment_vlan\n                                FILTER environment_vlan._to == vlan_network._from\n                                FOR access IN @@access\n                                    FILTER access._from == environment_vlan._from\n                                    FOR vip2 in @@vip\n                                        FILTER access._to == vip2._id\n                                        RETURN DISTINCT vip2\n)\n\nLET vips_comp_unit = UNIQUE(\n    FOR dns_link IN @@dns_link\n        FILTER dns_link._from == @variable\n        FOR vip IN @@vip\n            FILTER vip._id == dns_link._to\n\n            FOR port in @@port\n                FILTER port._from == vip._id\n                FOR pool_comp_unit IN @@pool_comp_unit\n                    FILTER pool_comp_unit._from == port._to\n                    FOR access IN @@access\n                        FILTER access._from == pool_comp_unit._to\n                        FOR vip3 IN @@vip\n                            FILTER access._to == vip3._id\n                            RETURN DISTINCT vip3\n)\nRETURN UNION_DISTINCT(vips_network, vips_environment, vips_comp_unit)"},
        {"name": "vip_vip", "description": "Dependências de uma APP", "collection": "vip", "params": {"@vip": "vip", "@port": "port", "@pool_comp_unit": "pool_comp_unit", "@network_comp_unit": "network_comp_unit", "@access": "access", "@vlan_network": "vlan_network", "@environment_vlan": "environment_vlan"}, "query": "LET vips_network = UNIQUE(\n    FOR vip IN @@vip\n        FILTER vip._id == @variable\n        FOR port in @@port\n            FILTER port._from == vip._id\n            FOR pool_comp_unit IN @@pool_comp_unit\n                FILTER pool_comp_unit._from == port._to\n                FOR network_comp_unit IN @@network_comp_unit\n                    FILTER network_comp_unit._to == pool_comp_unit._to\n                    FOR access IN @@access\n                        FILTER access._from == network_comp_unit._from\n                        FOR vip1 IN @@vip\n                            FILTER access._to == vip1._id\n                            RETURN vip1.name\n)\n\nLET vips_environment = UNIQUE(\n    FOR vip IN @@vip\n        FILTER vip._id == @variable\n        FOR port in @@port\n            FILTER port._from == vip._id\n            FOR pool_comp_unit IN @@pool_comp_unit\n                FILTER pool_comp_unit._from == port._to\n                FOR network_comp_unit IN @@network_comp_unit\n                    FILTER network_comp_unit._to == pool_comp_unit._to\n                    FOR vlan_network in @@vlan_network\n                        FILTER vlan_network._to == network_comp_unit._from\n                        FOR environment_vlan IN @@environment_vlan\n                            FILTER environment_vlan._to == vlan_network._from\n                            FOR access IN @@access\n                                FILTER access._from == environment_vlan._from\n                                FOR vip3 in @@vip\n                                    FILTER access._to == vip3._id\n                                    RETURN DISTINCT vip3.name \n)\n\nLET vips_comp_unit = UNIQUE(\n    FOR vip IN @@vip\n        FILTER vip._id == @variable\n        FOR port in @@port\n            FILTER port._from == vip._id\n            FOR pool_comp_unit IN @@pool_comp_unit\n                FILTER pool_comp_unit._from == port._to\n                FOR access IN @@access\n                    FILTER access._from == pool_comp_unit._to\n                    FOR vip2 IN @@vip\n                        FILTER access._to == vip2._id\n                        RETURN DISTINCT vip2.name\n)\nRETURN {'vips': UNION_DISTINCT(vips_environment, vips_comp_unit, vips_network)}"}
    ]

    for query in queries:
        try:
            response = session.request(
                'POST',
                '{}/v2/queries/'.format(os.getenv('GLOBOMAP_API_URL')),
                data=json.dumps(query),
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': 'Token token={}'.format(token)
                },
                verify=False
            )
        except Exception:
            print("create query '{}' error".format(query['name']))
            sys.exit(response.json())
        else:
            print("create query '{}' ok...".format(query['name']))
            content = response.json()
            print(response.status_code)
            print(content)

if __name__== "__main__":
  main()
